local a=_G;local decode_scanArray;local decode_scanComment;local decode_scanConstant;local decode_scanNumber;local decode_scanObject;local decode_scanString;local decode_scanWhitespace;local encodeString;local isArray;local isEncodable;function encode(b)if b==nil then return"null"end;local c=a.type(b)if c=='string'then return'"'..encodeString(b)..'"'end;if c=='number'or c=='boolean'then return a.tostring(b)end;if c=='table'then local d={}local e,f=isArray(b)if e then for g=1,f do table.insert(d,encode(b[g]))end else for g,h in a.pairs(b)do if isEncodable(g)and isEncodable(h)then table.insert(d,'"'..encodeString(g)..'":'..encode(h))end end end;if e then return'['..table.concat(d,',')..']'else return'{'..table.concat(d,',')..'}'end end;if c=='function'and b==null then return'null'end;a.assert(false,'encode attempt to encode unsupported type '..c..':'..a.tostring(b))end;function decode(i,j)j=j and j or 1;j=decode_scanWhitespace(i,j)a.assert(j<=string.len(i),'Unterminated JSON encoded object found at position in ['..i..']')local k=string.sub(i,j,j)if k=='{'then return decode_scanObject(i,j)end;if k=='['then return decode_scanArray(i,j)end;if string.find("+-0123456789.e",k,1,true)then return decode_scanNumber(i,j)end;if k==[["]]or k==[[']]then return decode_scanString(i,j)end;if string.sub(i,j,j+1)=='/*'then return decode(i,decode_scanComment(i,j))end;return decode_scanConstant(i,j)end;function null()return null end;function decode_scanArray(i,j)local l={}local m=string.len(i)a.assert(string.sub(i,j,j)=='[','decode_scanArray called but array does not start at position '..j..' in string:\n'..i)j=j+1;repeat j=decode_scanWhitespace(i,j)a.assert(j<=m,'JSON String ended unexpectedly scanning array.')local k=string.sub(i,j,j)if k==']'then return l,j+1 end;if k==','then j=decode_scanWhitespace(i,j+1)end;a.assert(j<=m,'JSON String ended unexpectedly scanning array.')object,j=decode(i,j)table.insert(l,object)until false end;function decode_scanComment(i,j)a.assert(string.sub(i,j,j+1)=='/*',"decode_scanComment called but comment does not start at position "..j)local n=string.find(i,'*/',j+2)a.assert(n~=nil,"Unterminated comment in string at "..j)return n+2 end;function decode_scanConstant(i,j)local o={["true"]=true,["false"]=false,["null"]=nil}local p={"true","false","null"}for g,q in a.pairs(p)do if string.sub(i,j,j+string.len(q)-1)==q then return o[q],j+string.len(q)end end;a.assert(nil,'Failed to scan constant from string '..i..' at starting position '..j)end;function decode_scanNumber(i,j)local n=j+1;local m=string.len(i)local r="+-0123456789.e"while string.find(r,string.sub(i,n,n),1,true)and n<=m do n=n+1 end;local s='return '..string.sub(i,j,n-1)local t=a.loadstring(s)a.assert(t,'Failed to scan number [ '..s..'] in JSON string at position '..j..' : '..n)return t(),n end;function decode_scanObject(i,j)local object={}local m=string.len(i)local u,v;a.assert(string.sub(i,j,j)=='{','decode_scanObject called but object does not start at position '..j..' in string:\n'..i)j=j+1;repeat j=decode_scanWhitespace(i,j)a.assert(j<=m,'JSON string ended unexpectedly while scanning object.')local k=string.sub(i,j,j)if k=='}'then return object,j+1 end;if k==','then j=decode_scanWhitespace(i,j+1)end;a.assert(j<=m,'JSON string ended unexpectedly scanning object.')u,j=decode(i,j)a.assert(j<=m,'JSON string ended unexpectedly searching for value of key '..u)j=decode_scanWhitespace(i,j)a.assert(j<=m,'JSON string ended unexpectedly searching for value of key '..u)a.assert(string.sub(i,j,j)==':','JSON object key-value assignment mal-formed at '..j)j=decode_scanWhitespace(i,j+1)a.assert(j<=m,'JSON string ended unexpectedly searching for value of key '..u)v,j=decode(i,j)object[u]=v until false end;function decode_scanString(i,j)a.assert(j,'decode_scanString(..) called without start position')local w=string.sub(i,j,j)a.assert(w==[[']]or w==[["]],'decode_scanString called for a non-string')local x=false;local n=j+1;local y=false;local m=string.len(i)repeat local k=string.sub(i,n,n)if not x then if k==[[\]]then x=true else y=k==w end else x=false end;n=n+1;a.assert(n<=m+1,"String decoding failed: unterminated string at position "..n)until y;local s='return '..string.sub(i,j,n-1)local t=a.loadstring(s)a.assert(t,'Failed to load string [ '..s..'] in JSON4Lua.decode_scanString at position '..j..' : '..n)return t(),n end;function decode_scanWhitespace(i,j)local z=" \n\r\t"local m=string.len(i)while string.find(z,string.sub(i,j,j),1,true)and j<=m do j=j+1 end;return j end;function encodeString(i)i=string.gsub(i,'\\','\\\\')i=string.gsub(i,'"','\\"')i=string.gsub(i,"'","\\'")i=string.gsub(i,'\n','\\n')i=string.gsub(i,'\t','\\t')return i end;function isArray(A)local B=0;for q,b in a.pairs(A)do if a.type(q)=='number'and math.floor(q)==q and 1<=q then if not isEncodable(b)then return false end;B=math.max(B,q)else if q=='n'then if b~=table.getn(A)then return false end else if isEncodable(b)then return false end end end end;return true,B end;function isEncodable(C)local A=a.type(C)return A=='string'or A=='boolean'or A=='number'or A=='nil'or A=='table'or A=='function'and C==null end