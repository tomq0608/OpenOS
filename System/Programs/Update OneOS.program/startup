OneOS.Log.i('Starting update')
local mainTitle = 'OneOS Updater'
local subTitle = 'Please wait...'

OneOS.CanClose = function()
	return false
end

function Draw()
	sleep(0)
	term.setBackgroundColour(colours.white)
	term.clear()
	local w, h = term.getSize()
	term.setTextColour(colours.lightBlue)
	term.setCursorPos(math.ceil((w-#mainTitle)/2), 8)
	term.write(mainTitle)
	term.setTextColour(colours.blue)
	term.setCursorPos(math.ceil((w-#subTitle)/2), 10)
	term.write(subTitle)
end

tArgs = {...}

Settings = {
	InstallPath = '/', --Where the program's installed, don't always asume root (if it's run under something like OneOS)
	Hidden = false, --Whether or not the update is hidden (doesn't write to the screen), useful for background updates
	GitHubUsername = 'oeed', --Your GitHub username as it appears in the URL
	GitHubRepoName = 'OneOS', --The repo name as it appears in the URL
	DownloadReleases = true, --If true it will download the latest release, otherwise it will download the files as they currently appear
	UpdateFunction = nil, --Sent when something happens (file downloaded etc.)
	TotalBytes = 0, --Do not change this value (especially programatically)!
	DownloadedBytes = 0, --Do not change this value (especially programatically)!
	Status = '',
	SecondaryStatus = '',
}

OneOS.LoadAPI('/System/JSON')
if JSON then
	OneOS.Log.i('Loaded JSON')
else
	error('Failed to load JSON API')
end

function downloadJSON(path)
	local _json = http.get(path)
	if not _json then
		error('Could not download: '..path..' Check your connection.')
	end
	return JSON.decode(_json.readAll())
end

if http then
	subTitle = 'HTTP enabled, attempting update...'
	Draw()
else
	subTitle = 'HTTP is required to update.'
	Draw()
	error('')
end

subTitle = 'Determining Latest Version'
Draw()
local releases = downloadJSON('https://api.github.com/repos/'..Settings.GitHubUsername..'/'..Settings.GitHubRepoName..'/releases')
local latestReleaseTag = nil
for i, v in ipairs(releases) do
	if not v.prerelease then
		latestReleaseTag = v.tag_name
		break
	end
end
subTitle = 'Optaining Latest Version URL'
Draw()
local refs = downloadJSON('https://api.github.com/repos/'..Settings.GitHubUsername..'/'..Settings.GitHubRepoName..'/git/refs/tags/'..latestReleaseTag)
local latestReleaseSha = refs.object.sha

subTitle = 'Downloading File Listing'
Draw()

local tree = downloadJSON('https://api.github.com/repos/'..Settings.GitHubUsername..'/'..Settings.GitHubRepoName..'/git/trees/'..latestReleaseSha..'?recursive=1').tree

local blacklist = {
	'/.gitignore',
	'/README.md',
	'/TODO',
	'/Desktop/.Desktop.settings',
	'/.version'
}

function isBlacklisted(path)
	for i, item in ipairs(blacklist) do
		if item == path then
			return true
		end
	end
	return false
end

Settings.TotalFiles = 0
Settings.TotalBytes = 0
for i, v in ipairs(tree) do
	if not isBlacklisted(Settings.InstallPath..v.path) and v.size then
		Settings.TotalBytes = Settings.TotalBytes + v.size
		Settings.TotalFiles = Settings.TotalFiles + 1
	end
end

Settings.DownloadedBytes = 0
Settings.DownloadedFiles = 0
function downloadBlob(v)
	if isBlacklisted(Settings.InstallPath..v.path) then
		return
	end
	if v.type == 'tree' then
		OneOS.Log.i('Making folder: '..'/'..Settings.InstallPath..v.path)
		Draw()
		OneOS.FS.makeDir('/'..Settings.InstallPath..v.path)
	else
		OneOS.Log.i('Starting download for: '..Settings.InstallPath..v.path)
		Draw()

        local tries, f = 0
        repeat 
			f = http.get(('https://raw.github.com/'..Settings.GitHubUsername..'/'..Settings.GitHubRepoName..'/'..latestReleaseTag..Settings.InstallPath..v.path):gsub(' ','%%20'))
                if not f then sleep(5) end
                tries = tries + 1
        until tries > 5 or f

		if not f then
			error('Downloading failed, try again. '..('https://raw.github.com/'..Settings.GitHubUsername..'/'..Settings.GitHubRepoName..'/'..latestReleaseTag..Settings.InstallPath..v.path):gsub(' ','%%20'))
		end

		local h = OneOS.FS.open('/'..Settings.InstallPath..v.path, 'w')
		h.write(f.readAll())
		h.close()
		OneOS.Log.i('Downloaded File: '..'/'..Settings.InstallPath..v.path)
		subTitle = 'Downloading: ' .. math.floor(100*(Settings.DownloadedFiles/Settings.TotalFiles))..'%' -- using the number of files over the number of bytes actually appears to be more accurate, the connection takes longer than sending the data
		Draw()
		if v.size then
			Settings.DownloadedBytes = Settings.DownloadedBytes + v.size
			Settings.DownloadedFiles = Settings.DownloadedFiles + 1
		end
	end
end

local connectionLimit = 5
local downloads = {}
for i, v in ipairs(tree) do
	local queueNumber = math.ceil(i / connectionLimit)
	if not downloads[queueNumber] then
		downloads[queueNumber] = {}
	end
	table.insert(downloads[queueNumber], function()
		downloadBlob(v)
	end)
end

for i, queue in ipairs(downloads) do
	parallel.waitForAll(unpack(queue))
end

local h = OneOS.FS.open('/System/.version', 'w')
h.write(latestReleaseTag)
h.close()

mainTitle = 'Installation Complete!'
subTitle = 'Rebooting in 1 second...'
Draw()
sleep(1)

OneOS.Log.i('Done, rebooting now.')
OneOS.KillSystem()