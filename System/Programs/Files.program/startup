tArgs = {...}

OneOS.LoadAPI('/System/API/Bedrock.lua', false)
OneOS.LoadAPI('/System/API/Peripheral.lua')

local program = Bedrock:Initialise()

Current = {
	History = {},
	HistoryItem = 0,
	FileList = {},
	Path = tArgs[1] or '/Desktop/'
}

Settings = {
	ShowHidden = false,
	ListMode = false,
}

function WriteSettings()
	local h = fs.open('.Files.settings', 'w')
	h.write(textutils.serialize(Settings))
	h.close()
end

function ReadSettings()
	local h = fs.open('.Files.settings', 'r')
	if h then
		Settings = textutils.unserialize(h.readAll())
		h.close()
	else
		WriteSettings()
	end
end

function OptionsButtonClick(self, event, side, x, y)
	if self:ToggleMenu('optionsmenu') then
		if Settings.ListMode then
			program:GetObject('ViewModeMenuItem').Text = 'Icon View'
		end

		if Settings.ShowHidden then
			program:GetObject('HiddenFilesMenuItem').Text = 'Hide Hidden Files'
		end

		program:GetObject('ViewModeMenuItem').Click = function()
			Settings.ListMode = not Settings.ListMode
			RefreshFiles()
			WriteSettings()
		end

		program:GetObject('HiddenFilesMenuItem').Click = function()
			Settings.ShowHidden = not Settings.ShowHidden
			RefreshFiles()
			WriteSettings()
		end
	end
end

function SidebarClick(self, item, event, side, x, y)
	term.setTextColour(colours.black)
	GoToPath(item.Path)	
end

function FileClick(item, event, side, x, y)
	if side == 1 then
		if OneOS.Helpers.IsDirectory(item.Path) then
			GoToPath(item.Path)
		else
			OneOS.Helpers.OpenFile(item.Path)
			program:StartTimer(RefreshFiles, 1)
		end
	elseif side == 2 then
		if item:ToggleMenu('filemenu', x, y) then
			program:GetObject('OpenMenuItem').OnClick = function(_item)
				FileClick(item, event, 1, x, y)
			end

			program:GetObject('ViewProgramContentMenuItem').OnClick = function(_item)
				GoToPath(item.Path)
			end

			program:GetObject('OpenWithArgsMenuItem').OnClick = function(_item)
				program:DisplayTextBoxWindow("Program Arguments", 'Enter the arguments for the program separated by a space.', function(success, value)
					if success and #value ~= 0 then
						local tWords = {}
						for match in string.gmatch( value, "[^ \t]+" ) do
							table.insert( tWords, match )
						end
						OneOS.Run(item.Path, unpack(tWords))
					end
				end)
			end

			program:GetObject('OpenWithMenuItem').OnClick = function(_item)
				OneOS.Helpers.OpenFileWith(item.Path, program)
			end

			program:GetObject('TransmitMenuItem').OnClick = function(_item)
				OneOS.Run('/Programs/Transmit.program/', item.Path)
			end

			program:GetObject('CreatePackageMenuItem').OnClick = function(_item)
				local packrun = loadfile('pkgmake')
				local env = getfenv()
				setfenv( packrun, env)
				local path = item.Path:sub(1,#item.Path-1)
				packrun(item.Path, OneOS.Helpers.RemoveFileName(path)..OneOS.Helpers.RemoveExtension(OneOS.FS.getName(path))..'.pkg')
				RefreshFiles()
			end

			program:GetObject('RenameMenuItem').OnClick = function(_item)
				OneOS.Helpers.RenameFile(item.Path, RefreshFiles, program)
			end

			program:GetObject('DeleteMenuItem').OnClick = function(_item)
				OneOS.Helpers.DeleteFile(item.Path, RefreshFiles, program)
			end

			program:GetObject('AddToDesktopMenuItem').OnClick = function(_item)
				OneOS.Helpers.MakeShortcut(item.Path)
			end

			program:GetObject('CopyMenuItem').OnClick = function(_item)
				OneOS.Clipboard.Copy(item.Path, 'filepath')
			end

			program:GetObject('CutMenuItem').OnClick = function(_item)
				OneOS.Clipboard.Cut(item.Path, 'filepath')
			end

			if OneOS.Clipboard.Content and OneOS.Clipboard.Type == 'filepath' then
				program:GetObject('PasteMenuItem').Enabled = true
				program:GetObject('PasteMenuItem').OnClick = function(btn, event, side, x, y)
					PasteFile()
				end
			end

			program:GetObject('NewFolderMenuItem').OnClick = function(_item)
				OneOS.Helpers.NewFolder(OneOS.Helpers.ParentFolder(item.Path)..'/', RefreshFiles, program)
			end

			program:GetObject('NewFileMenuItem').OnClick = function(_item)
				OneOS.Helpers.NewFile(OneOS.Helpers.ParentFolder(item.Path)..'/', RefreshFiles, program)
			end
			
			if OneOS.FS.isDir(item.Path) then
				program:RemoveObject('TransmitMenuItem')
			else
				program:RemoveObject('CreatePackageMenuItem')
			end

			if not OneOS.Helpers.Extension(item.Path) == 'program' or not OneOS.FS.isDir(item.Path) then
				program:RemoveObject('ViewProgramContentMenuItem')
				program:RemoveObject('OpenWithArgsMenuItem')
			else
				program:RemoveObject('OpenWithMenuItem')
			end
		end
	end
end

function NoFileClick(self, event, side, x, y)
	if self:ToggleMenu('nofilemenu', x, y) then
		if OneOS.Clipboard.Content and OneOS.Clipboard.Type == 'filepath' then
			program:GetObject('PasteMenuItem').Enabled = true
			program:GetObject('PasteMenuItem').OnClick = function(btn, event, side, x, y)
				PasteFile()
			end
		end

		program:GetObject('NewFolderMenuItem').OnClick = function(_item)
			OneOS.Helpers.NewFolder(Current.Path, RefreshFiles, program)
		end

		program:GetObject('NewFileMenuItem').OnClick = function(_item)
			OneOS.Helpers.NewFile(Current.Path, RefreshFiles, program)
		end
			
	end
end

function PasteFile()				
	local destName = OneOS.FS.getName(OneOS.Clipboard.Content)
	local copyNumber = 1
	while OneOS.FS.exists(Current.Path..'/'..destName) do
		destName = program.Helpers.RemoveExtension(OneOS.FS.getName(OneOS.Clipboard.Content)).. ' ' .. copyNumber .. program.Helpers.Extension(OneOS.FS.getName(OneOS.Clipboard.Content), true)
		copyNumber = copyNumber + 1
	end
	local destPath = program.Helpers.TidyPath(Current.Path..'/'..destName)

	if not OneOS.Clipboard.IsCut then
		OneOS.FS.copy(OneOS.Clipboard.Content, destPath)
		RefreshFiles()
	elseif OneOS.Clipboard.IsCut then
		local content = OneOS.Clipboard.Paste()
		OneOS.FS.move(content, destPath)
		RefreshFiles()
	end
end

function RefreshFiles()
	diskOpenButton = nil
	if Current.Path:sub(1,12) == '/Peripheral/' and peripheral.isPresent(Current.Path:sub(13)) then
		program:GetObject('FilesPeripheralView').Side = nil
		program:GetObject('FilesPeripheralView').Side = Current.Path:sub(13)
		program:GetObject('FilesPeripheralView').Visible = true
		program:GetObject('FilesListView').Visible = false
		program:GetObject('FilesCollectionView').Visible = false
	else
		if Current.Path:sub(1,12) == '/Peripheral/' then
			GoToPath('/Desktop/')
			return
		end
		if Settings.ListMode then
			program:GetObject('FilesListView').Items = {}
			program:GetObject('FilesListView').Visible = true
			program:GetObject('FilesCollectionView').Visible = false
			program:GetObject('FilesPeripheralView').Visible = false
		else
			program:GetObject('FilesCollectionView').Items = {}
			program:GetObject('FilesCollectionView').Visible = true
			program:GetObject('FilesListView').Visible = false
			program:GetObject('FilesPeripheralView').Visible = false
		end

		for i, v in ipairs(OneOS.FS.list(Current.Path)) do
			if Settings.ShowHidden or string.sub( v, 1, 1 ) ~= '.' then
				local path = OneOS.Helpers.TidyPath(Current.Path .. '/' .. v)
				if path == '/rom/' then
					break
				end

				if Settings.ListMode then
					table.insert(program:GetObject('FilesListView').Items, {["Text"] = OneOS.FS.getName(path), ["Path"] = path, ["TextColour"] = OneOS.Helpers.IsDirectory(path) and colours.grey or colours.black, OnClick = FileClick})
				else
					table.insert(program:GetObject('FilesCollectionView').Items, {["Type"] = 'FileView', ["Path"] = path, OnClick = FileClick, ["Height"]=FileView.Height, ["Width"]=FileView.Width})
				end
			end
		end
	end
	--Current.SidebarList.Peripherals = Peripheral.GetPeripherals()
end

function RefreshPeripherals(self, event)
	local items = {}
	for i, p in ipairs(Peripheral.GetPeripherals()) do
        table.insert(items, {["Text"] = p.Name, ["Path"] = '/Peripheral/'..p.Side})
	end
	program:GetObject('Sidebar').Items.Peripherals = items
	program:GetObject('Sidebar'):UpdateItems()
	RefreshFiles()
end

function GoToPath(path, history)
	history = history or false
	local path = OneOS.Helpers.TidyPath(path)
	program:GetObject('PathLabel').Text = path
	if not history then
		for i, v in ipairs(Current.History) do
			if i >= Current.HistoryItem then
				Current.History[i] = nil
 			end
		end
		table.insert(Current.History, Current.Path)
		Current.HistoryItem = #Current.History + 1
	end
	Current.FileScroll = 0
	Current.Path = path
	if Current.History[Current.HistoryItem-1] then
		program:GetObject('BackButton').Enabled = true
	else
		program:GetObject('BackButton').Enabled = false
	end

	if Current.History[Current.HistoryItem+1] then
		program:GetObject('ForwardButton').Enabled = true
	else
		program:GetObject('ForwardButton').Enabled = false
	end
	RefreshFiles()
end

program:RegisterEvent('disk', RefreshPeripherals)
program:RegisterEvent('disk_eject', RefreshPeripherals)
program:RegisterEvent('peripheral', RefreshPeripherals)
program:RegisterEvent('peripheral_detach', RefreshPeripherals)

program:Run(function()
	program:LoadView('main')
	ReadSettings()
	GoToPath(Current.Path, true)
	program:GetObject('OptionsButton').OnClick = OptionsButtonClick
	program:GetObject('Sidebar').OnChildClick = SidebarClick

	program:GetObject('FilesListView').OnClick = NoFileClick
	program:GetObject('FilesCollectionView').OnClick = NoFileClick

	program:GetObject('BackButton').OnClick = function(self)
		if Current.History[Current.HistoryItem-1] then
			table.insert(Current.History, Current.Path)
			Current.HistoryItem = Current.HistoryItem - 1
			GoToPath(Current.History[Current.HistoryItem], true)
		end
	end

	program:GetObject('GoUpButton').OnClick = function(self)
		if Current.Path:sub(1,12) ~= '/Peripheral/' then
			GoToPath(OneOS.Helpers.ParentFolder(Current.Path))
		end
	end

	program:GetObject('ForwardButton').OnClick = function(self)
		if Current.History[Current.HistoryItem+1] then
			Current.HistoryItem = Current.HistoryItem + 1
			GoToPath(Current.History[Current.HistoryItem], true)
		end
	end

	RefreshPeripherals()
end)

