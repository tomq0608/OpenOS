OneOS.LoadAPI('/System/API/Bedrock.lua', false)
--do return end
program = Bedrock:Initialise()

local files = {}
local offset = 0
local dragRelPos = nil
local currentPage = 1
local totalPages = 1
local dragLock = false
local dragTimer = nil

local function FilesHaveChanged()
	local list = OneOS.FS.list('Desktop/')

	local count = 0
	for k, v in pairs(files) do
		count = count + 1
	end
	
	if #list ~= count then
		return true
	else
		for i, v in ipairs(list) do
			if not files[v] then
				return true
			end
		end
	end
	return false
end

local function MaxIcons()
	local slotHeight = 5
	local slotWidth = 11
	local maxX = math.floor((Drawing.Screen.Width - 2) / slotWidth)
	local maxY = math.floor((Drawing.Screen.Height - 2) / slotHeight)
	local y, x = 2, math.floor(((Drawing.Screen.Width - (maxX * slotWidth))) / 2)
	return x, y, maxX, maxY, maxX * maxY
end

local function IconLocation(i)
	local slotHeight = 5
	local slotWidth = 11
	local x, y, maxX, maxY, maxPage = MaxIcons()
	local _i = ((i-1) % maxPage) + 1
	local rowPos = ((_i - 1) % maxX)
	local colPos = math.ceil(_i / maxX) - 1
	local page = math.ceil(i/maxPage)
	x = x + (slotWidth * rowPos) + offset + 2 + Drawing.Screen.Width * (page - 1)
	y = y + colPos * slotHeight
	return x, y
end

local function AddOffset()
	for k, v in pairs(files) do
		v.X = v.BaseX + offset
	end
	program:Draw()
end

function ReloadIndicators()
	local indicatorWidth = (totalPages * 2) - 2
	local indicatorPos = math.ceil((Drawing.Screen.Width/2)) - totalPages
	program:RemoveObjects('IndicatorButton')
	for i = 1, totalPages do
		local col = colours.grey
		if currentPage == i then
			col = colours.white
		end
		program:AddObject({
			Type = 'Button',
			X = indicatorPos + i * 2,
			Y = Drawing.Screen.Height - 1,
			Text = ' ',
			Width = 1,
			Name = 'IndicatorButton',
			BackgroundColour = col,
			OnClick = function(self)
				GoToPage(i)
			end
		})
	end
end

function ReloadFiles()
	program:RemoveObjects('FileView')

	local list = OneOS.FS.list('Desktop/')
	files = {}
	local count = 0
	for i, v in ipairs(list) do
		local x, y = IconLocation(i)
		files[v] = program:AddObject({
			Type = 'FileView',
			X = x,
			BaseX = x,
			Y = y,
			Name = 'FileView',
			Path = 'Desktop/'..v,
			OnClick = FileClick
		})
		count = i
	end

	local x, y, maxX, maxY, maxPage = MaxIcons()
	totalPages = math.ceil(count/maxPage)

	ReloadIndicators()
end

function FileClick(self, event, side, x, y, obj)
	if side == 1 then
		OneOS.Helpers.OpenFile(self.Path)
	elseif side == 2 then
		obj = obj or self
		if obj:ToggleMenu('filemenu', x, y) then
			self.Bedrock:GetObject('OpenMenuItem').OnClick = function(itm)
				OneOS.Helpers.OpenFile(self.Path)
			end

			self.Bedrock:GetObject('RenameMenuItem').OnClick = function(itm)
				OneOS.Helpers.RenameFile(self.Path, ReloadFiles, self.Bedrock)
			end

			self.Bedrock:GetObject('DeleteMenuItem').OnClick = function(itm)
				OneOS.Helpers.DeleteFile(self.Path, ReloadFiles, self.Bedrock)
			end

			self.Bedrock:GetObject('NewFolderMenuItem').OnClick = function(itm)
				OneOS.Helpers.NewFolder(OneOS.Helpers.ParentFolder(self.Path)..'/', ReloadFiles, self.Bedrock)
			end

			self.Bedrock:GetObject('NewFileMenuItem').OnClick = function(itm)
				OneOS.Helpers.NewFile(OneOS.Helpers.ParentFolder(self.Path)..'/', ReloadFiles, self.Bedrock)
			end

			self.Bedrock:GetObject('RefreshMenuItem').OnClick = function(itm)
				ReloadFiles()
			end
		end
	end
end

function GoToPage(i)
	if i > 0 and i <= totalPages then
		selectedFile = nil
		local old = currentPage
		currentPage = i
		AnimatePageChange(old, currentPage)
	end
end

function DragTimeout()
	AnimatePageChange(currentPage, currentPage)
end

function AnimatePageChange(from, to)
	dragLock = true
	dragRelPos = nil
	local max = -1*Drawing.Screen.Width * (to - 1)
	local relOffset = (offset + Drawing.Screen.Width * (to - 1))
	local direction = -1
	if relOffset < 0 then
		direction = 1
	end
	if OneOS.Settings:GetValues()['UseAnimations'] then
		if relOffset < 0 then
			relOffset = relOffset * -1
		end
		local speed = math.floor(Drawing.Screen.Width / 6)--4--math.ceil(relOffset / Drawing.Screen.Width * 5)
		while ((max < offset) and direction == -1) or ((max > offset) and direction == 1) do
			offset = offset + direction * speed
			relOffset = (offset + Drawing.Screen.Width * (to - 1))
			if speed > relOffset and relOffset > -1*speed then
				offset = max
			end
			AddOffset()			
			sleep(0.05)
		end
	end
	offset = max
	ReloadIndicators()
	AddOffset()
	dragLock = false
end

local function viewClick(self, event, side, x, y)
	if side == 1 then
		dragRelPos = x
	elseif side == 2 then
		if program.View:ToggleMenu('desktopmenu', x, y) then
			program:GetObject('NewFolderMenuItem').OnClick = function(itm)
				OneOS.Helpers.NewFolder('/Desktop/', ReloadFiles, self.Bedrock)
			end

			program:GetObject('NewFileMenuItem').OnClick = function(itm)
				OneOS.Helpers.NewFile('/Desktop/', ReloadFiles, self.Bedrock)
			end

			program:GetObject('RefreshMenuItem').OnClick = function(itm)
				ReloadFiles()
			end
		end
	end
end

local function viewDrag(self, event, side, x, y)
	if dragRelPos then
		offset = (x - dragRelPos) - Drawing.Screen.Width * (currentPage - 1)
		AddOffset()
	end
	if not dragLock then
		program:StopTimer(dragTimer)
		dragTimer = program:StartTimer(DragTimeout, 1)
		local relOffset = (offset + Drawing.Screen.Width * (currentPage - 1))
		if relOffset < 0 and relOffset < -1*Drawing.Screen.Width/4 then
			GoToPage(currentPage + 1)
		elseif relOffset > 0 and relOffset > Drawing.Screen.Width/4 then
			GoToPage(currentPage - 1)
		end
	end
end

function UpdateBackground()
	local colour = OneOS.Settings:GetValues()['DesktopColour']
	if colour then
		program.View.BackgroundColour = colour
	end
end

program.OnKeyChar = function(self, event, key)
	if not program:GetActiveObject() then
		if key == keys.right then
			GoToPage(currentPage + 1)
		elseif key == keys.left then
			GoToPage(currentPage - 1)
		end
	end
end

program:Run(function()
	program:LoadView('main')
	UpdateBackground()
	OneOS.Settings.SetDesktopColourChange(UpdateBackground)
	ReloadFiles()
	-- program:StartRepeatingTimer(function()
	-- 	if FilesHaveChanged() then
	-- 		ReloadFiles()
	-- 		GoToPage(1)
	-- 	end
	-- end, 5)

	program.View.OnClick = viewClick
	program.View.OnDrag = viewDrag
end)