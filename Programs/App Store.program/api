--[[

ComputerCraft AppStore API by oeed
For documentation on how to use it go to ccappstore.com/help/api/

]]--

local function contains(table, element)
  for _, value in pairs(table) do
    if value == element then
      return true
    end
  end
  return false
end

local apiURL = "http://ccappstore.com/api/"

local function checkHTTP()
	if http then
		return true
	else
		return false
	end
end

local function requireHTTP()
	if checkHTTP() then
		return true
	else
		error("The 'http' API is not enabled!")
	end
end

function doRequest(command, subcommand, values)
	values = values or {}
	requireHTTP()

	local url = apiURL .. "?command=" .. command .."&subcommand=" .. subcommand
	for k, v in pairs(values) do
		url = url .. "&" .. k .. "=" .. v
	end
	local request = http.get(url)
	if request then
		local response = request.readAll()
		request.close()
		if response == "<h2>The server is too busy at the moment.</h2><p>Please reload this page few seconds later.</p>" then
			error("Server is too busy at the moment.")
		end
		local t = textutils.unserialize(response)
		if t then
			return t
		else
			return response
		end
	end
	return nil
end

function getAllApplications()
	return doRequest('application', 'all')
end

function getTopCharts()
	return doRequest('application', 'topcharts')
end

function getApplicationsInCategory(name)
	return doRequest('application', 'category', {name = name})
end

function getFeaturedApplications()
	return doRequest('application', 'featured')
end

function getApplication(id)
	return doRequest('application', 'get', {id = id})
end

function getCategories(id)
	return doRequest('application', 'categories')
end

function addApplication(username, password, serializeddata, name, description, sdescription, category)
	return doRequest('application', 'add', {username = username, password = password, serializeddata = serializeddata, name = name, description = description, sdescription = sdescription, category = category})
end
--[[
function deleteApplication(id, username, password)
	return doRequest('application', 'delete', {id = id, username = username, password = password})
end

function updateApplication(id, username, password, serializeddata, name, description, sdescription, category)
	return doRequest('application', 'update', {id = id, username = username, password = password, serializeddata = serializeddata, name = name, description = description, sdescription = sdescription, category = category})
end
]]--

function addChangeLogToApplication(id, username, password, changelog, version)
	return doRequest('application', 'addchangelog', {id = id, username = username, password = password, changelog = changelog, version = version})
end

function downloadApplication(id)
	return doRequest('application', 'download', {id = id})
end

function searchApplications(name)
	return doRequest('application', 'search', {name = name})
end

function getAllNews()
	return doRequest('news', 'all')
end

function getNews(id)
	return doRequest('news', 'get', {id = id})
end

function getInstalledApplications(id)
	return doRequest('computer', 'get', {id = id})
end

local function resolve( _sPath )
	local sStartChar = string.sub( _sPath, 1, 1 )
	if sStartChar == "/" or sStartChar == "\\" then
		return fs.combine( "", _sPath )
	else
		return fs.combine( sDir, _sPath )
	end
end

function saveApplicationIcon(id, path)
	local app = getApplication(id)
	local icon = app.icon
	local _fs = fs
	if OneOS then
		_fs = OneOS.FS
	end
	local h = _fs.open(path, 'w')
	h.write(icon)
	h.close()
end
--Downloads and installs an application
--id = the id of the application
--path = the path is the name of the folder/file it'll be copied too
--removeSpaces = removes spaces from the name (useful if its being run from the shell)
--alwaysFolder = be default if there is only one file it will save it as a single file, if true files will always be placed in a folder
--fullPath = if true the given path will not be changed, if false the program name will be appended
function installApplication(id, path, removeSpaces, alwaysFolder, fullPath)
	local package = downloadApplication(id)
	if type(package) ~= 'string' or #package == 0 then
		error('The application did not download correctly or is empty. Try again.')
	end
	local pack = JSON.decode(package)
	if pack then

		local _fs = fs
		if OneOS then
			_fs = OneOS.FS
		end
		local function makeFile(_path,_content)
			sleep(0)
			local file=_fs.open(_path,"w")
			file.write(_content)
			file.close()
		end
		local function makeFolder(_path,_content)
			_fs.makeDir(_path)
				for k,v in pairs(_content) do
					if type(v)=="table" then
						makeFolder(_path.."/"..k,v)
					else
						makeFile(_path.."/"..k,v)
					end
				end
		end

		local app = getApplication(id)
		local appName = app['name']
		local keyCount = 0
		for k, v in pairs(pack) do
			keyCount = keyCount + 1
		end
		if removeSpaces then
			appName = appName:gsub(" ", "")
		end
		local location = path..'/'
		if not fullPath then
			location = location .. appName
		end
		if keyCount == 1 and not alwaysFolder then
			makeFile(location, pack['startup'])
		else
			makeFolder(location, pack)
			location = location .. '/startup'
		end

		return location
	else
		error('The application appears to be corrupt. Try downloading it again.')
	end
end

function registerComputer(realid, username, password)
	return doRequest('computer', 'register', {realid = realid, username = username, password = password})
end

function getAllComments(type, id)
	return doRequest('comment', 'get', {ctype = type, ctypeid = id})
end

function getComment(id)
	return doRequest('comment', 'get', {id = id})
end

function deleteComment(id, username, password)
	return doRequest('comment', 'delete', {id = id, username = username, password = password})
end

function addComments()
	return doRequest('comment', 'get', {id = id})
end

function getUser()
	return doRequest('user', 'get', {id = id})
end

function registerUser(username, password, email, mcusername)
	return doRequest('user', 'register', {username = username, password = password, email = email, mcusername = mcusername})
end

function testConnection()
	local ok = false
  	parallel.waitForAny(function()
	    if http and http.get(apiURL) then
			ok = true
		end
	end,function()
	  	sleep(10)
	end)
	if not ok then
		error('Network error')
	end
	return ok	
end