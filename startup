cleanEnvironment = {}
for k, v in pairs(_G) do
	cleanEnvironment[k] = v
end

isDebug = false

oldTerm = term

--[[
term.setBackgroundColour(colours.white)
term.setTextColour(colours.black)
term.clear()
]]--

--local _, err = pcall(function()


local doLog = false

local function log(...)
	if Log then
		Log.i(...)
	end
	if isDebug or doLog then
		print(...)
	end
end

local tAPIsLoading = {}

local Extension = function(path, addDot)
	if not path then
		return nil
	elseif not string.find(fs.getName(path), '%.') then
		if not addDot then
			return fs.getName(path)
		else
			return ''
		end
	else
		local _path = path
		if path:sub(#path) == '/' then
			_path = path:sub(1,#path-1)
		end
		local extension = _path:gmatch('%.[0-9a-z]+$')()
		if extension then
			extension = extension:sub(2)
		else
			--extension = nil
			return ''
		end
		if addDot then
			extension = '.'..extension
		end
		return extension:lower()
	end
end

local RemoveExtension = function(path)
	if path:sub(1,1) == '.' then
		return path
	end
	local extension = Extension(path)
	if extension == path then
		return fs.getName(path)
	end
	return string.gsub(path, extension, ''):sub(1, -2)
end

function LoadAPI(_sPath)
	local sName = RemoveExtension(fs.getName( _sPath ))
	if tAPIsLoading[sName] == true then
		return true
	end
	log('Loading: '.._sPath)
	tAPIsLoading[sName] = true
		
	local tEnv = {isStartup = true }
	setmetatable( tEnv, { __index = getfenv()} )
	local fnAPI, err = loadfile( _sPath )
	if fnAPI then
		setfenv( fnAPI, tEnv )
		fnAPI()
	else
		printError( err )
		log('Error: '..err)
        tAPIsLoading[sName] = nil
		return false
	end
	
	local tAPI = {}
	for k,v in pairs( tEnv ) do
		tAPI[k] =  v
	end
	
	if not tAPI then
		log('Could not find API: '..sName)
		error('Could not find API: '..sName)
	-- elseif _sPath:find('Objects') then
	-- 	tAPI.__index = Object
	-- 	if tAPI.Inherit then
	-- 		if not getfenv()[tAPI.Inherit] then
	-- 			LoadAPI('System/Objects/'..tAPI.Inherit..'.lua')
	-- 		end
	-- 		tAPI.__index = getfenv()[tAPI.Inherit]
	-- 	end
	-- 	setmetatable(tAPI, tAPI)
	end

	getfenv()[sName] = tAPI

	--tAPIsLoading[sName] = nil
	return true
end

term.setCursorPos(1,1)
root = ''

function PrintCentered(text, y)
    local w, h = term.getSize()
    x = math.ceil(math.ceil((w / 2) - (#text / 2)), 0)+1
    term.setCursorPos(x, y)
    write(text)
end

LoadAPI('System/API/Log.lua')
Log.Initialise()
Log.i('Starting OneOS')
Log.i(os.version())
Log.i('Free space: '..fs.getFreeSpace('/'))

local h = fs.open('/System/.version', 'r')
local version = '?'
if h then
	version = h.readAll()
	h.close()
else
	version = 'Not set'
end
Log.i('OneOS Version: '..version)

LoadAPI('System/API/Settings.lua')
-- LoadAPI('System/API/Object.lua')
local _side = Settings:GetValues()['Monitor']
if not term.setTextScale and _side then
	if peripheral.isPresent(_side) and peripheral.getType(_side) == 'monitor' and peripheral.call(_side, 'isColour') == true then
		term.setBackgroundColor(colours.grey)
		term.clear()
		term.setTextColor(colours.white)
		PrintCentered('OneOS is being run off a monitor', 6)
		term.setTextColor(colours.lightGrey)
		PrintCentered('To stop it from running off a monitor try:', 8)
		term.setTextColor(colours.white)
		PrintCentered('- Save you files, then find the monitor in Files', 10)
		PrintCentered("and click: 'Use Computer Screen'", 11)
		
		PrintCentered('- Break the monitor next to the computer', 13)
		PrintCentered('This method will NOT save your files.', 14)
		Log.i("Using a monitor on side: ".._side)
		term.redirect(peripheral.wrap(Settings:GetValues()['Monitor']))
	else
		Settings:SetValue('Monitor', nil)
	end
end


function LoadingScreen()
	if fs.getFreeSpace and fs.getFreeSpace('/') < 51200 then
		if not isDebug then
			term.setBackgroundColor(colours.grey)
			term.setTextColor(colours.white)
			term.clear()

			PrintCentered('You have less than 50KB of free space remaining!', 6)
			PrintCentered('You may encounter crashes due to this.' , 7)
			term.setTextColor(colours.lightGrey)

			PrintCentered('Try to free up some space, open \'About OneOS\'' , 9)
			PrintCentered('in the One menu for more information.' , 10)
			term.setTextColor(colours.white)

			PrintCentered('Click anywhere to continue.', 12)

			os.pullEvent('mouse_click')
		end
		Log.w('Less than 50KB disk space available.')
	end
	
	local x, y = nil
	
	if not isDebug then
		term.setBackgroundColour(colours.black)	
		term.clear()
		sleep(0.1)
		term.setBackgroundColour(colours.grey)
		term.clear()
		sleep(0.1)
		term.setBackgroundColour(colours.lightGrey)
		term.clear()
		sleep(0.1)

		local screenWidth, screenHeight = term.getSize()
		term.setBackgroundColour(colours.white)	
		term.clear()
		x = math.ceil((screenWidth - 23) / 2) + 1
		y = (screenHeight - 8) / 2 + 1

		local text = 'OneOS by oeed'
		term.setCursorPos(math.ceil((screenWidth - #text) / 2) + 1, y + 5)
		term.setTextColour(colours.grey)
		term.write(text)

		term.setTextColour(colours.lightGrey)
		PrintCentered('Hold ALT for boot options', screenHeight)

	end
		
	local currentImage = -1
	local totalAPIs = #fs.list(root .. 'System/API/')-- + #fs.list(root .. 'System/Objects/')
	local apis = {}
	for _, file in pairs(fs.list(root .. 'System/API/')) do
		if string.sub(file,1,1) ~= "." then
			table.insert(apis, 'System/API/' .. file)
		end
	end
	-- for _, file in pairs(fs.list(root .. 'System/Objects/')) do
	-- 	if string.sub(file,1,1) ~= "." then
	-- 		table.insert(apis, 'System/Objects/' .. file)
	-- 	end
	-- end

	for _, file in pairs(apis) do
		if not isDebug then
			if math.floor(_*(8/#apis)) ~= currentImage then
				currentImage = math.floor(_*(8/#apis))
				Log.i('Loading image: System/Images/Boot/boot'..currentImage)
				local image = paintutils.loadImage('System/Images/Boot/boot'..currentImage)
				paintutils.drawImage(image, x, y)
				sleep(0)
			end
		end

		if not LoadAPI(root .. file) then
			return false
		end
	end
	sleep(0.3)
	return true
end

function RecieveStartupKey()
	while true do
	  local event, arg = os.pullEvent()
	  if event=='onesos_bootdone' then
	  	log('No boot modifier, starting normally.')
	  	return nil
	  elseif event == "key" then
	  	log('Boot Key: '..arg)
	  	return arg 
	  end
	  
	end
end

function PastebinPut(file)
	if not fs.exists(file) then
		return 'NOT EXIST'
	end
    -- Read in the file
    local sName = fs.getName( file )
    local file = fs.open( file, "r" )
    local sText = file.readAll()
    file.close()
    
    local key = "0ec2eb25b6166c0c27a394ae118ad829"
    local response = http.post(
        "http://pastebin.com/api/api_post.php", 
        "api_option=paste&"..
        "api_dev_key="..key.."&"..
        "api_paste_format=lua&"..
        "api_paste_name="..textutils.urlEncode(sName).."&"..
        "api_paste_code="..textutils.urlEncode(sText)
    )
        
    if response then
        local sResponse = response.readAll()
        response.close()
                
        local sCode = string.match( sResponse, "[^/]+$" )
        return sCode
    end
    return 'FAILED'
end

function BootMenu()
	Log.i('Entered Boot Menu')
	os.loadAPI('/System/API/LegacyDrawing.lua')
	local Drawing = LegacyDrawing
	Drawing.Clear(colours.white)
	Drawing.DrawCharactersCenter(nil, (-Drawing.Screen.Height/2) + 2, nil, nil, 'OneOS', colours.blue, colours.white)
	Drawing.DrawCharactersCenter(nil, (-Drawing.Screen.Height/2) + 3, nil, nil, 'Boot Options', colours.grey, colours.white)
	Drawing.DrawCharactersCenter(1, (Drawing.Screen.Height/2), nil, nil, 'Use arrow keys to select, enter to accept', colours.grey, colours.white)
	local continue = false
	local options = {
		{'Boot Normally', function() continue = true end},
		{'Reset Settings', function() if fs.exists('/System/.OneOS.settings') then fs.delete('/System/.OneOS.settings') end continue = true end},
		{'Wipe Computer', function()
			term.setCursorPos(1,1)
			term.setBackgroundColor(colours.black)
			term.setTextColor(colours.white)
			term.clear()
			local function removeFolder(path)
				if path == '/rom' then
					return
				end
				for i, v in ipairs(fs.list(path)) do
					if fs.isDir(path..'/'..v) then
						removeFolder(path..'/'..v)
					else
						fs.delete(path..'/'..v)
						print('Removed: '..path..'/'..v)
						sleep(0)
					end
				end
				if path ~= '' then
					fs.delete(path)
				end
			end
			removeFolder('')
			
		end},
		{'Use CraftOS', function()end}
	}

	local selected = 1
	local function draw()
		for i, v in ipairs(options) do
			local bg = colours.white
			local tc = colours.blue
			if i == selected then
				bg = colours.blue
				tc = colours.white
			end
			Drawing.DrawCharactersCenter(nil, math.floor(-#options/2) + i, nil, nil, ' '..v[1]..' ', tc, bg)
		end
		Drawing.DrawBuffer()
	end
	local wait = true
	draw()
	while wait do
		local event, key = os.pullEvent('key')
		if key == keys.up then
			selected = selected - 1
			if selected < 1 then
				selected = 1
			end
		elseif key == keys.down then
			selected = selected + 1
			if selected > #options then
				selected = #options
			end
		elseif key == keys.enter then
			if options[selected][1] == 'Wipe Computer' then
				Drawing.Clear(colours.white)
				Drawing.DrawCharactersCenter(nil, (-Drawing.Screen.Height/2) + 2, nil, nil, 'OneOS', colours.blue, colours.white)
				Drawing.DrawCharactersCenter(nil, (-Drawing.Screen.Height/2) + 3, nil, nil, 'Boot Options', colours.grey, colours.white)
				Drawing.DrawCharactersCenter(1, (Drawing.Screen.Height/2), nil, nil, 'Use arrow keys to select, enter to accept', colours.grey, colours.white)
				Drawing.DrawCharactersCenter(nil, nil, nil, nil, 'Are you sure? Press Y or N', colours.red, colours.white)
				Drawing.DrawBuffer()
				local _ = true
				while _ do
					local ev, k = os.pullEvent('char')
					if k == 'y' then
						options[selected][2]()
						sleep(2)
						os.reboot()
					elseif k == 'n' then
						_ = false
					end
				end
				Drawing.DrawCharactersCenter(nil, nil, nil, nil, '                          ', colours.red, colours.white)
			else
				options[selected][2]()
				wait = false
			end
		end
		draw()
	end
	return continue
end

local function addFile(path, input)
	local h = fs.open(path, 'r')
	if h then
		input = input .. '\0' .. h.readAll()
		h.close()
	end
	return input
end

local function addFolder(path, input)
	for i, file in ipairs(fs.list(path)) do
		local _path = path .. '/' .. file
		if fs.isDir(_path) then
			input = addFolder(_path, input)
		elseif file:sub(1,1) ~= '.' and not file:find('.log') then
			input = addFile(_path, input)
		end
	end
	return input
end

function GetHash()
	local toCheck = {'/System/', 'startup'}
	local raw = addFile('startup', '')
	raw = addFolder('/System/', raw)
	local hash = CRC32.Hash(raw)
	return hash
end

function IsSystemModified()
	local h = fs.open('/System/.hash', 'r')
	if h then
		local correctHash = tonumber(h.readLine())
		h.close()
		local hash = GetHash()
		if hash == correctHash then
			log('System is not modified.')
			return false
		end		
	end
	log('System is modified, not submitting report.')
	return true
end

local oldFiles = {
	'/System/API/Animation.lua',
	'/System/API/Button.lua',
	'/System/API/ButtonDialogueWindow.lua',
	'/System/API/Desktop.lua',
	'/System/API/ListView.lua',
	'/System/API/Menu.lua',
	'/System/API/OpenWithDialougeWindow.lua',
	'/System/API/Overlay.lua',
	'/System/API/Printer.lua',
	'/System/API/ProgressBar.lua',
	'/System/API/ScrollBar.lua',
	'/System/API/TextBox.lua',
	'/System/API/TextDialogueWindow.lua',
	'/System/API/TextInput.lua',
	'/System/API/Turtle.lua',
	'/System/API/Window.lua',
	'/System/Images/Icons/ink',
	'/System/Images/Icons/lua',
	'/System/Images/Icons/nfp',
	'/System/Images/Icons/nft',
	'/System/Images/Icons/skch',
	'/System/Images/Icons/pkg',
	'/System/Images/Icons/startup',
	'/System/Images/Icons/text',
	'/System/Images/Icons/txt',
	'/System/Programs/Setup.program',
	'/System/Programs/About OneOS',
	'/System/Programs/Settings',
	'/System/Programs/Update OneOS',
	'/System/API/Object.lua',
	'/System/Objects/Button.lua',
	'/System/Objects/CollectionView.lua',
	'/System/Objects/ImageView.lua',
	'/System/Objects/Label.lua',
	'/System/Objects/ListView.lua',
	'/System/Objects/Menu.lua',
	'/System/Objects/ProgressBar.lua',
	'/System/Objects/ScrollBar.lua',
	'/System/Objects/ScrollView.lua',
	'/System/Objects/Separator.lua',
	'/System/Objects/TextBox.lua',
	'/System/Objects/View.lua',
	'/System/Objects/Window.lua',
	'/System/API/Drawing.lua',
}

function RemoveOldFiles()
	local found = false
	for i, v in ipairs(oldFiles) do
		if fs.exists(v) then
			found = true
		end
	end
	if not found then
		return
	end
	doLog = true
	log('OneOS has detected old files which may cause conflict.')
	log('If you want to keep these files then shutdown now.')
	print('---------------------------------------------------')
	log("If you can, you should do a fresh install. There might be lots of trash files not deleted that could cause issues.")
	log("To do this, press enter, reboot and hold ALT then select 'Wipe Computer' and reinstall.")
	print('---------------------------------------------------')
	log('Press enter to delete these files.')
	read()
	fs.delete('/System/.OneOS.settings')
	for i, v in ipairs(oldFiles) do
		log('Deleting: '..v)
		if fs.exists(v) then
			fs.delete(v)
			sleep(0)
		end
	end
	doLog = false
	log('Clean complete!')
	log('Rebooting now...')
	sleep(1)
	os.reboot()
end

function Start()
	RemoveOldFiles()
	local key = nil
	local success = false
	parallel.waitForAll(function()success = LoadingScreen() os.queueEvent('onesos_bootdone') end, function() key = RecieveStartupKey() end)
	if success and key == keys.leftAlt or key == keys.rightAlt then
		success = BootMenu()
	end
	return success
end

if not term.isColour() then
	term.setBackgroundColor(colours.black)
	term.setTextColor(colours.white)
	term.clear()

	PrintCentered('OneOS requires an advanced (gold) computer.', 8)

	PrintCentered('Press any key to return to the shell.', 10)

	os.pullEvent('key')
	term.clear()
	term.setCursorPos(1,1)

elseif Start() then
	os.run(getfenv(), '/System/main.lua')

	local ok = nil
	if not fs.exists('/System/.version') or not fs.exists('/System/.OneOS.settings') then
		log('No .version or .OneOS.settings! Running First Setup')
		if fs.exists('/System/.OneOS.settings') then
			fs.delete('/System/.OneOS.settings')
		end
		xpcall(FirstSetup, function(err)
			Log.e('[> First Setup] '..err)
			ok = {false, err}
		end)
	else
		if isDebug then
			Initialise()
		else
			xpcall(Initialise, function(err)
				ok = {false, err}
			end)
		end
	end

	if not isDebug and not ok[1] then

		xpcall(function()loadfile('/System/main.lua')end, function(err)
			log('Syntaxt error (probably): '..err)
			table.insert(ok, err)
		end)
		
		for i, v in ipairs(ok) do
			Log.e(v)
		end
		--if the crash is a too long without yeilding error then there's nothing we can really do, restart
		if ok[2]:sub(-25) == 'Too long without yielding' then
			term.setBackgroundColor(colours.grey)
			term.setTextColor(colours.white)
			term.clear()
			local w,h = term.getSize()
			if fs.exists('System/Images/crash') then
				Log.i('Loading image: System/Images/crash')
				paintutils.drawImage(paintutils.loadImage('System/Images/crash'), (w-7)/2 + 1, 3)
			end
			term.setBackgroundColor(colours.grey)
			term.setTextColor(colours.white)

			PrintCentered('OneOS has been forced to reboot', 8)	

			PrintCentered('You likely let your (real) computer go to sleep', 10)
			PrintCentered('or there was some huge amount of lag.', 11)
			PrintCentered('Unfortunately, there\'s no way to recover from this.', 13)

			PrintCentered('Click anywhere to reboot.', 15)

			os.pullEvent('mouse_click')
			os.reboot()
		end
			term.setBackgroundColor(colours.grey)
		term.setTextColor(colours.white)
		term.clear()
		local w,h = term.getSize()
		if fs.exists('/System/Images/crash') then
			Log.i('Loading image: System/Images/crash')
			local img = paintutils.loadImage('/System/Images/crash')
			if img and w then
				paintutils.drawImage(img, (w-7)/2 + 1, 3)
			end
		else
			table.insert(ok, 'Crash image nonexistent!')
		end
		term.setBackgroundColor(colours.grey)
		term.setTextColor(colours.white)

		PrintCentered('OneOS has crashed!', 8)

		PrintCentered('OneOS has encountered a serious error,', 10)
		PrintCentered('click anywhere to reboot.', 11)

		term.setTextColor(colours.lightGrey)
		table.remove(ok, 1)
		for i, v in ipairs(ok) do
			local w, h = term.getSize()
		    x = math.ceil(math.ceil((w / 2) - (#v / 2)), 0)+1
		    if x < 1 then
		    	x = 1
		    end
		    term.setCursorPos(x, i+12)
		    print(v)
		end

		PrintCentered('Checking for file modifications...', Drawing.Screen.Height-3)
		local modified = IsSystemModified()
		term.clearLine()
		if not modified then
			PrintCentered('Please report this on the forum.', Drawing.Screen.Height)
		end
		term.setTextColor(colours.white)
		if http then
			if modified then
				PrintCentered('Modified file system detected.', Drawing.Screen.Height-3)
				PrintCentered('Not sending report.', Drawing.Screen.Height-2)
			else
				log('Sending error report...')
				PrintCentered('Sending error report, please wait.', Drawing.Screen.Height-3)
				local success = false
				parallel.waitForAny(function()sleep(7) end, function()
					local s = ok[#ok]
					local pastebin = 'Not1.6'
					if fs.find then
						local f = fs.find('*/'..s:sub(1, s:find(':')-1))[1]
						if not f then
							pastebin = PastebinPut(s)
						else
							pastebin = PastebinPut(f)
						end
					end
					local detail = {message='Crashed Before Main Initialise', time = os.clock(), errors = ok, pastebin = pastebin}
					if Current and Current.Programs then
						detail.message = 'Crashed After Main Initialise'
						detail.programs = {}
						for i, v in ipairs(Current.Programs) do
							table.insert(detail.programs, v.Name)
						end
					end
					local version = '?'

					local h = fs.open('/System/.version', 'r')
					if h then
						version = h.readAll()
						h.close()
					else
						version = 'N/E'
					end

					local detailString = textutils.serialize(detail) ..'\n\n'

					local h = fs.open('/System/OneOS.log', 'r')
					if h then
						detailString = detailString .. 'Log:\n'..h.readAll()
						h.close()
					else
						detailString = detailString .. 'No Log'
					end

					if not isDebug then
						local _ = http.post('http://olivercooper.me/errorSubmit.php', 
		                                "product="..textutils.urlEncode(tostring('OneOS')).."&"..
		                                "version="..textutils.urlEncode(tostring(version)).."&"..
		                                "error="..textutils.urlEncode(ok[#ok]).."&"..
		                                "detail="..textutils.urlEncode(detailString));
						if _ then
							success = true
						end
					end
				end)
				local message = 'Error report failed!'
				if success then
					message = 'Error report sent!'
				end
				log(message)
				term.setCursorPos(1, Drawing.Screen.Height-3)
				term.clearLine()
				PrintCentered(message..' Click to reboot.', Drawing.Screen.Height-3)
			end
		end

		os.pullEvent('mouse_click')
		os.reboot()
	end
end

term.setBackgroundColor(colours.black)
term.setCursorPos(1,1)
term.clear()
